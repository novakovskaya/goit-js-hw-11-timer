{"version":3,"sources":["js/refs.js","js/timer.js","index.js"],"names":["days","document","querySelector","hours","mins","secs","PROMPT_DELAY","CountdownTimer","constructor","selector","targetDate","intervalId","start","setInterval","currentDate","Date","now","startTime","time","getTimeComponents","insertValues","stop","clearInterval","pad","value","String","padStart","Math","floor","textContent","blackFridayTimer"],"mappings":";;;AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACbA,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,wBAJhB,QAAA,QAAA;;ACmDf,aAnDA,IAAA,EAAA,EAAA,QAAA,WAmDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjDA,MAAMI,EAAe,IAErB,MAAMC,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,WAAa,KAGpBC,QACOD,KAAAA,WAAaE,YAAY,KACtBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKP,WAAaI,EAE9BI,EAAO,KAAKC,kBAAkBF,GAC/BG,KAAAA,aAAaF,IACjBZ,GAGLe,OACEC,cAAc,KAAKX,YAGrBY,IAAIC,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCP,kBAAkBD,GAMT,MAAA,CAAElB,KALI,KAAKuB,IAAII,KAAKC,MAAMV,EAAQ,QAK1Bf,MAJD,KAAKoB,IAAII,KAAKC,MAAOV,EAAQ,MAAyB,OAI9Cd,KAHT,KAAKmB,IAAII,KAAKC,MAAOV,EAAQ,KAAoB,MAGlCb,KAFf,KAAKkB,IAAII,KAAKC,MAAOV,EAAQ,IAAc,OAK1DE,cAAa,KAAEpB,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC3BL,EAAAA,QAAAA,KAAK6B,YAAc7B,EACnBG,EAAAA,QAAAA,MAAM0B,YAAc1B,EACpBC,EAAAA,QAAAA,KAAKyB,YAAczB,EACnBC,EAAAA,QAAAA,KAAKwB,YAAcxB,GAI5B,MAAMyB,EAAmB,IAAIvB,EAAe,CAC1CE,SAAU,WACVC,WAAY,IAAIK,KAAK,kBAGvBe,EAAiBlB;;AClDjB,aADA,QAAA,oBACA,QAAA","file":"src.696c5fd3.js","sourceRoot":"../src","sourcesContent":["export default {\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  mins: document.querySelector('[data-value=\"mins\"]'),\n  secs: document.querySelector('[data-value=\"secs\"]'),\n};\n","import refs from './refs';\n\nconst PROMPT_DELAY = 1000;\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.intervalId = null;\n  }\n\n  start() {\n    this.intervalId = setInterval(() => {\n      const currentDate = Date.now();\n      const startTime = this.targetDate - currentDate;\n\n      const time = this.getTimeComponents(startTime);\n      this.insertValues(time);\n    }, PROMPT_DELAY);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  insertValues({ days, hours, mins, secs }) {\n    refs.days.textContent = days;\n    refs.hours.textContent = hours;\n    refs.mins.textContent = mins;\n    refs.secs.textContent = secs;\n  }\n}\n\nconst blackFridayTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Nov 26, 2021'),\n});\n\nblackFridayTimer.start();\n","import './sass/main.scss';\nimport './js/timer';\n"]}