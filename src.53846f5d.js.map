{"version":3,"sources":["js/timer.js","index.js"],"names":["CountdownTimer","constructor","selector","targetDate","document","querySelector","intervalId","timerDays","timerHours","timerMins","timerSecs","start","setInterval","currentDate","Date","now","startTime","time","getTimeComponents","insertValues","stop","clearInterval","pad","value","String","padStart","days","Math","floor","hours","mins","secs","textContent","blackFridayTimer"],"mappings":";;;AAAA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWE,SAASC,cAAcH,GAClCC,KAAAA,WAAaA,EACbG,KAAAA,WAAa,KAEbC,KAAAA,UAAY,KAAKL,SAASG,cAAc,uBACxCG,KAAAA,WAAa,KAAKN,SAASG,cAAc,wBACzCI,KAAAA,UAAY,KAAKP,SAASG,cAAc,uBACxCK,KAAAA,UAAY,KAAKR,SAASG,cAAc,uBAG/CM,QACOL,KAAAA,WAAaM,YAAY,KACtBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKb,WAAaU,EAE9BI,EAAO,KAAKC,kBAAkBF,GAC/BG,KAAAA,aAAaF,IACjB,KAGLG,OACEC,cAAc,KAAKf,YAGrBgB,IAAIC,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCP,kBAAkBD,GAMT,MAAA,CAAES,KALI,KAAKJ,IAAIK,KAAKC,MAAMX,EAAQ,QAK1BY,MAJD,KAAKP,IAAIK,KAAKC,MAAOX,EAAQ,MAAyB,OAI9Ca,KAHT,KAAKR,IAAIK,KAAKC,MAAOX,EAAQ,KAAoB,MAGlCc,KAFf,KAAKT,IAAIK,KAAKC,MAAOX,EAAQ,IAAc,OAK1DE,cAAa,KAAEO,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC3BxB,KAAAA,UAAUyB,YAAcN,EACxBlB,KAAAA,WAAWwB,YAAcH,EACzBpB,KAAAA,UAAUuB,YAAcF,EACxBpB,KAAAA,UAAUsB,YAAcD,GAIjC,MAAME,EAAmB,IAAIjC,EAAe,CAC1CE,SAAU,WACVC,WAAY,IAAIW,KAAK,kBAGvBmB,EAAiBtB;;ACnDjB,aADA,QAAA,oBACA,QAAA","file":"src.53846f5d.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = document.querySelector(selector);\n    this.targetDate = targetDate;\n    this.intervalId = null;\n\n    this.timerDays = this.selector.querySelector('[data-value=\"days\"]');\n    this.timerHours = this.selector.querySelector('[data-value=\"hours\"]');\n    this.timerMins = this.selector.querySelector('[data-value=\"mins\"]');\n    this.timerSecs = this.selector.querySelector('[data-value=\"secs\"]');\n  }\n\n  start() {\n    this.intervalId = setInterval(() => {\n      const currentDate = Date.now();\n      const startTime = this.targetDate - currentDate;\n\n      const time = this.getTimeComponents(startTime);\n      this.insertValues(time);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  insertValues({ days, hours, mins, secs }) {\n    this.timerDays.textContent = days;\n    this.timerHours.textContent = hours;\n    this.timerMins.textContent = mins;\n    this.timerSecs.textContent = secs;\n  }\n}\n\nconst blackFridayTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Nov 26, 2021'),\n});\n\nblackFridayTimer.start();\n","import './sass/main.scss';\nimport './js/timer';\n"]}